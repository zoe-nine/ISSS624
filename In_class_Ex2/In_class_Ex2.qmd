---
title: "In_class_Ex2"
editor: visual
execute: 
  warning: false
  message: false
---

## Getting Started

In the code chunk below, `p_load()` of *pacman* package is used to install and load the following R packages into R environment:

-   sf:

-   tidyverse:

-   tmap:

-   spdep:

-   funModeling will be used for rapid Exploratory Data Analysis

```{r}
pacman::p_load(tmap, sf, tidyverse, spdep, funModeling)
```

## Importing Geospatial Data

In this take-home exericse, two data sets will be used, they are:

-   geo_export
-   geoBoundaries-NGA-ADM2

### Importing water point geospatial data

The code chunk below imports the water point geospatial data (i.e. geo_export).

-   st_read() of sf package is used to import geo_export shapefile into R environment and save the imported geospatial data into simple feature data table.

-   filter() of dplyr package is used to extract water point records of Nigeria.

```{r}
#| eval: false
wp <- st_read(dsn = "geodata",
              layer = "geo_export",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria")
```

Next, `write_rds()` of readr package is used to save the extracted sf data table (i.e.Â wp) into an output file in rds data format. The output file is called *wp_nga.rds* and it is saved in *geodata* sub-folder.

```{r}
#| eval: false
wp_nga <- write_rds(wp,"geodata/wp_nga.rds")
```

### Importing Nigeria LGA boundary data

The code chunk below imports the LGA boundary data into R environment by using `st_read()` of **sf** package to import *geoBoundaries-NGA-ADM2* shapefile into R environment and save the imported geospatial data into simple feature data table.

```{r}
#| eval: false
nga <- st_read(dsn = "geodata",
               layer = "geoBoundaries-NGA-ADM2",
               crs = 4326)
```

## Data Wrangling

### Recoding NA values into string

In the code chunk below, `replace_na()` is used to recode all the *NA* values in *status_clean* field into *Unknown*.

```{r}
#| eval: false
wp_nga <- read_rds("geodata/wp_nga.rds") %>%
  mutate(`status_cle` = 
replace_na(`status_cle`, "Unknown"))
```

### EDA

In the code chunk below, `freq()` of **funModeling** package is used to display the distribution of *status_clean* field in *wp_nga*.

```{r}
#| eval: false
freq(data=wp_nga, 
     input = "status_cle")
```

![](images/Screenshot%202022-11-28%20at%2011.28.09%20PM.png)

## Extracting Water Point Data

In this section, we will extract the water point records by using classes in *status_cle* anfield.

### Extracting funtional water point

In the code chunk below, `filter()` of dplyr is used to select functional water points.

```{r}
#| eval: false
wpt_functional <- wp_nga %>%
  filter(`status_cle` %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
#| eval: false
freq(data=wpt_functional, 
     input = 'status_cle')
```

![](images/Screenshot%202022-11-28%20at%2011.29.51%20PM.png)

### Extracting non-funtional water point

In the code chunk below, `filter()` of dplyr is used to select non-functional water points.

```{r}
#| eval: false
wpt_nonfunctional <- wp_nga %>%
  filter(`status_cle` %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

```{r}
#| eval: false
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

![](images/Screenshot%202022-11-28%20at%2011.30.49%20PM.png)

### Extracting water point with Unknown class

In the code chunk below, `filter()` of dplyr is used to select water points with unknown status.

```{r}
#| eval: false
wpt_unknown <- wp_nga %>%
  filter(`status_cle` == "Unknown")
```

## Performing Point-in-Polygon Count

```{r}
#| eval: false
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

## Saving the Analytical Data Table

```{r}
#| eval: false
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) 
```

Things to learn from the code chunk above:

-   `mutate()` of **dplyr** package is used to derive two fields namely *pct_functional* and *pct_non-functional*.

Now, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.

```{r}
#| eval: false
write_rds(nga_wp, "geodata/nga_wp.rds")
```

Before you end this section, please remember to delete away all the raw data. Notice that the only data file left is *nga_wp.rds* and it's file size is around 2.1MB.

## Visualising the spatial distribution of water points

```{r}
#| fig-width: 14
#| fig-height: 12
nga_wp <- read_rds("geodata/nga_wp.rds")
total <- qtm(nga_wp, "total wpt") + tm_layout(legend.height = 0.25, legend.width = 0.35)
wp_functional <- qtm(nga_wp, "wpt functional") + tm_layout(legend.height = 0.25, legend.width = 0.35)
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional") + tm_layout(legend.height = 0.25, legend.width = 0.35)
unknown <- qtm(nga_wp, "wpt unknown")+ tm_layout(legend.height = 0.25, legend.width = 0.35)
tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2) 
```
